# 串的定义
1. prefix
    从串s尾部删除0到多个符号得到的串
2. suffix
    从串的开始处删除0到多个符号得到的串
3. substring
    删除串的某个prefix和某个suffix得到的串
4. 真前缀、真后缀、真子串
    串s既不等于空串也不等于串s本身的prefix、suffix、substring的串
5. subsequence
    从串中删除0个或多个符号后得到的串, 被删除的符号可以不相邻

# 正则表达式是什么？
我们首先需要知道语言这个概念, 初看正则也许你会觉得正则是另一种形式定义的查询语言,
实际上正则本身与你使用的语言是相关的, 可以说语言本身即是正则, 这只是我的理解, 具体还请查阅形式定义语言相关资料
1. 连接
    空串是连接操作的单位元, 所以如果s为一个串
        εs = sε = s
    两个串的连接可以看作这两个串的乘积(集合乘积),
    假设
        x = fuck,
        y = you
    它们产生的串接(concatenation)为fuck,you
    注: 龙书第二版翻译中p74-75将concatenation翻译成连接按照上下文来看是不对的, 应为串接
2. 并
    L ∪ M = { s| s属于L或者s属于M }

3. Kleene closure
    L*就是L的各次幂（包括0次幂）的并集

#正则定义
正则定义在流行的语言中正则表达式里基本没有支持的, 其原因如下
    1. 会造成递归
    2. 限制太多
正则定义也就是比如我声明一个变量, 这个变量存储的是正则, 然后在正则表达式里使用,
假设
    w = [a-z]
    d = [0-9]
那么我们在一个正则里使用这两个变量
    wd
可匹配小写字母后跟数字, 但如果我们需要匹配w会怎样? 当然可以用特殊标记符号, 但这是有限制的, 比如在w中有w定义使用, 这会造成递归
所以目前支持正则定义的都是系统内置, 比如js中的\d、\w等, 它们也只是将正则定义转换为正则集